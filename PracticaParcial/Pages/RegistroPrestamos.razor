@page "/"
@using PracticaParcial.Controllers;
@using PracticaParcial.Entidades;

    <div class="container">

        <h1>Registro de prestamos</h1>

        <EditForm Model="Prestamo" OnValidSubmit="Guardar">
            <DataAnnotationsValidator />

            <div class="form-group">
                <label for="PrestamoId">Codigo del prestamo</label>
                <div class="form-inline">
                    <InputNumber @bind-Value="Prestamo.PrestamoId" class="form-control col-4" />
                    <button type="button" class="btn btn-outline-dark" style="margin:10px" @onclick="Buscar">Buscar</button>
                </div>
            </div>

            <div class="form-group">
                <label for="Nombres">Nombres</label>
                <InputText @bind-Value="Prestamo.Nombres" class="form-control" />
                <ValidationMessage For="@(() => Prestamo.Nombres)" />
            </div>

            <div class="form-group">
                <label for="Fecha">Fecha</label>
                <InputDate @bind-Value="Prestamo.Fecha" class="form-control" />
                <ValidationMessage For="@(() => Prestamo.Fecha)" />
            </div>

            <div class="form-group">
                <label for="Telefono">Telefono</label>
                <InputText @bind-Value="Prestamo.Telefono" class="form-control" />
                <ValidationMessage For="@(() => Prestamo.Telefono)" />
            </div>

            <div class="form-group">
                <label for="Correo">Correo</label>
                <InputText @bind-Value="Prestamo.Correo" class="form-control" />
                <ValidationMessage For="@(() => Prestamo.Correo)" />
            </div>

            <div class="form-group">
                <label for="Capital">Capital</label>
                <InputNumber @bind-Value="Prestamo.Capital" class="form-control" />
                <ValidationMessage For="@(() => Prestamo.Capital)" />
            </div>

            <div class="form-group">
                <label for="Semanas">Semanas</label>
                <InputNumber @bind-Value="Prestamo.Semanas" class="form-control" />
                <ValidationMessage For="@(() => Prestamo.Semanas)" />
            </div>

            <div class="form-group">
                <label for="MontoCuotas">Monto de las cuotas</label>
                <InputNumber @bind-Value="Prestamo.MontoCuotas" class="form-control" disabled />
                <ValidationMessage For="@(() => Prestamo.MontoCuotas)" />
            </div>

            <small class="text-muted">@Mensaje</small>

            <div class="form-group">
                <button style="margin:15px" type="submit" class="btn btn-success">Guardar</button>
                <button style="margin:15px" class="btn btn-primary" type="button" @onclick="Limpiar">Limpiar</button>
                <button style="margin:15px" class="btn btn-danger" type="button" @onclick="Eliminar">Eliminar</button>
            </div>
        </EditForm>

    </div>





@code{

    public Prestamos Prestamo { get; set; }
    public string Mensaje { get; set; }

    protected override void OnInitialized()
    {
        Prestamo = new Prestamos();
        Mensaje = string.Empty;
    }

    private void Guardar()
    {
        PrestamosController prestamosController = new PrestamosController();
        try
        {
            if(Prestamo.PrestamoId == 0)
            {
                Calcular();
                if (prestamosController.Guardar(Prestamo))
                {
                    Limpiar();
                    Mensaje = "Prestamo Guardado!..";
                }
                else
                {
                    Mensaje = "No se pudo guardar el prestamo!..";
                }
            }
            else
            {
                if (prestamosController.Buscar(Prestamo.PrestamoId) != null)
                {
                    Calcular();
                    if (prestamosController.Modificar(Prestamo))
                    {
                        Limpiar();
                        Mensaje = "Prestamo Modificado!..";
                    }
                    else
                    {
                        Mensaje = "No se pudo modificar el prestamo!..";
                    }
                }
                else
                {
                    Mensaje = "Este prestamo no existe, por ende, no puede ser modificado!..";
                }
            }
        }
        catch (Exception)
        {
            throw;
        }

    }

    private void Buscar()
    {
        PrestamosController prestamosController = new PrestamosController();

        try
        {
            Prestamos PrestamoTemporal = null;
            PrestamoTemporal = prestamosController.Buscar(Prestamo.PrestamoId);

            if(PrestamoTemporal != null)
            {
                Limpiar();
                Prestamo = PrestamoTemporal;
            }
            else
            {
                Limpiar();
                Mensaje = "Este prestamo no existe";
            }
        }
        catch(Exception)
        {
            throw;
        }
    }

    private void Eliminar()
    {
        PrestamosController prestamosController = new PrestamosController();

        try
        {
            if (prestamosController.Eliminar(Prestamo.PrestamoId))
            {
                Limpiar();
                Mensaje = "Prestamo eliminado con exito!...";
            }
            else
            {
                Mensaje = "El prestamo no pudo ser eliminado!...";
            }
        }
        catch(Exception)
        {
            throw;
        }
    }

    private void Limpiar()
    {
        this.Prestamo = new Prestamos();
        Mensaje = string.Empty;
    }

    private void Calcular()
    {
        Prestamo.MontoCuotas = Prestamo.Capital / Prestamo.Semanas;
    }

}


